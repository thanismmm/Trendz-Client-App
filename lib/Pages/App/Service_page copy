import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:iconsax/iconsax.dart';

import 'package:trendz_customer/Models/service_modal.dart';

class ServicePage extends StatefulWidget {
  final List<Services>? services;
  final Function(String date, String branch)? onNavigateToCart;
  const ServicePage({Key? key, required this.services, this.onNavigateToCart})
      : super(key: key);

  @override
  State<ServicePage> createState() => _ServicePageState();
}

class _ServicePageState extends State<ServicePage> {
  final securestorage = const FlutterSecureStorage();
  String? _fullname;

  // List<Service> getSelectedServices() {
  //   return services.where((service) => service.isSelected).toList();
  // }

  Future<void> _loadUserData() async {
    String? fullname = await securestorage.read(key: "fullname");

    setState(() {
      _fullname = fullname;
    });
  }

  @override
  void initState() {
    super.initState();
    _loadUserData();
  }
  // Services data

  String selectedLocation = "Maruthamunai"; // Default branch
  String selectedDate = "Salect Date";
  final List<Service> services = [
    Service(
      name: "Haircut",
      description: "Professional haircut for all styles.",
      price: "LKR 1,500",
      duration: "30 minutes",
      image: "lib/assets/images/haircut.png",
      isSelected: false,
    ),
    Service(
      name: "Beard Trim",
      description: "Get a neat and stylish beard trim.",
      price: "LKR 800",
      duration: "20 minutes",
      image: "lib/assets/images/makeup.png",
      isSelected: false,
    ),
    Service(
      name: "Head Massage",
      description: "Relaxing and refreshing head massage.",
      price: "LKR 1,200",
      duration: "25 minutes",
      image: "lib/assets/images/massage.png",
      isSelected: false,
    ),
    Service(
      name: "Makeup",
      description: "Professional makeup for all occasions.",
      price: "LKR 2,500",
      duration: "45 minutes",
      image: "lib/assets/images/makeup.png",
      isSelected: false,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          "Services",
          style: Theme.of(context)
              .textTheme
              .bodySmall
              ?.copyWith(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              child: Padding(
                padding: const EdgeInsets.all(10.0),
                child: Column(
                  children: [
                    // Greeting and instruction
                    Align(
                      alignment: Alignment.centerLeft,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 5.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "Hi $_fullname,",
                              style: Theme.of(context).textTheme.bodyLarge,
                            ),
                            const SizedBox(height: 4),
                            Text(
                              "Select the Services",
                              style: Theme.of(context).textTheme.bodySmall,
                            ),
                            const SizedBox(height: 16),
                          ],
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 5),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          // Location Dropdown
                          Expanded(
                            flex: 1,
                            child: DropdownButtonFormField<String>(
                              value: selectedLocation,
                              decoration: InputDecoration(
                                isDense: true,
                                labelText: "Location",
                                labelStyle:
                                    Theme.of(context).textTheme.bodyMedium,
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(8.0),
                                ),
                              ),
                              items: [
                                "Sainthamaruthu",
                                "Maruthamunai",
                              ]
                                  .map((location) => DropdownMenuItem(
                                        value: location,
                                        child: Text(
                                          location,
                                          style: Theme.of(context)
                                              .textTheme
                                              .bodySmall,
                                        ),
                                      ))
                                  .toList(),
                              onChanged: (value) {
                                setState(() {
                                  selectedLocation = value!;
                                });
                              },
                            ),
                          ),
                          const SizedBox(width: 10),

                          // Date Picker
                          Expanded(
                            flex: 1,
                            child: GestureDetector(
                              onTap: () async {
                                DateTime now = DateTime.now();
                                DateTime threeDaysLater =
                                    now.add(const Duration(days: 2));

                                DateTime? pickedDate = await showDatePicker(
                                  context: context,
                                  initialDate: now,
                                  firstDate: now,
                                  lastDate: threeDaysLater,
                                );

                                if (pickedDate != null) {
                                  setState(() {
                                    selectedDate =
                                        "${pickedDate.day}/${pickedDate.month}/${pickedDate.year}";
                                  });
                                }
                              },
                              child: Container(
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 12.0, vertical: 10.0),
                                decoration: BoxDecoration(
                                  border: Border.all(color: Colors.grey),
                                  borderRadius: BorderRadius.circular(8.0),
                                ),
                                child: Text(
                                  selectedDate == null
                                      ? "Select Date"
                                      : selectedDate,
                                  style: TextStyle(
                                    color: selectedDate == null
                                        ? Theme.of(context).primaryColor
                                        : Theme.of(context).primaryColor,
                                  ),
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    // Services List
                    Column(
                      children: services.map((service) {
                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 2.0),
                          child: Card(
                            color: Theme.of(context).cardColor,
                            shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12)),
                            elevation: 3,
                            child: ExpansionTile(
                              leading: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: Icon(
                                      service.isSelected
                                          ? Icons.check_circle
                                          : Icons.circle_outlined,
                                      color: service.isSelected
                                          ? Colors.green
                                          : Colors.grey,
                                    ),
                                    onPressed: () {

                                      setState(() {
                                        service.isSelected =
                                            !service.isSelected;
                                      });
                                    },
                                  ),
                                  Image.asset(
                                    service.image,
                                    width: 40,
                                    height: 40,
                                    fit: BoxFit.cover,
                                  ),
                                ],
                              ),
                              title: Text(
                                service.name,
                                style: Theme.of(context).textTheme.bodyMedium,
                              ),
                              subtitle: Text(
                                service.price,
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                                style: Theme.of(context)
                                    .textTheme
                                    .bodySmall
                                    ?.copyWith(
                                        color: Theme.of(context).primaryColor),
                              ),
                              trailing: Icon(
                                service.isExpanded
                                    ? Iconsax.arrow_up_2
                                    : Iconsax.arrow_down_1,
                              ),
                              onExpansionChanged: (isExpanded) {
                                setState(() {
                                  service.isExpanded = isExpanded;
                                });
                              },
                              children: [
                                Padding(
                                  padding:
                                      const EdgeInsets.symmetric(vertical: 8.0),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.start,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text("Duration: ${service.duration}"),
                                      const SizedBox(height: 4),
                                      Text("${service.description}"),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                  ],
                ),
              ),
            ),
          ),

          // Bottom Button
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: ElevatedButton(
                onPressed: () {
                   final  selectedServices = widget.services?.where((service) => service.isSelected).toList();
                  if (selectedDate != "Select Date" &&
                      selectedLocation.isNotEmpty) {
                    widget.onNavigateToCart!(selectedDate, selectedLocation);
                  } else {
                    // Show an error message if fields are empty
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                          content:
                              Text("Please select both date and location")),
                    );
                  }
                },
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16.0),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0),
                  ),
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text(
                      "Next",
                      style: TextStyle(fontSize: 16),
                    ),
                    SizedBox(
                      width: 4,
                    ),
                    Icon(
                      Iconsax.arrow_right_3,
                      size: 16,
                    )
                  ],
                )),
          ),
        ],
      ),
    );
  }
}

class Service {
  final String name;
  final String description;
  final String price;
  final String duration;
  final String image;
  bool isSelected;
  bool isExpanded;

  Service({
    required this.name,
    required this.description,
    required this.price,
    required this.duration,
    required this.image,
    this.isSelected = false,
    this.isExpanded = false,
  });
}
